const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 calcPointLightFresnel(Light light, vec3 position, vec3 normal, vec4 texCol, vec3 lPos, float intensity, vec3 col)
{
	vec3 camera_direction = normalize(u_cameraPos - position);
	if(dot(normal, camera_direction) < -0.1 && u_textureMode != 1) discard;
	
	if(material.hasNormalTex != 0){
		normal = t_norm.xyz;
		if(material.hardNormals == 0)
			normal.z *= 2;
		normal = normalize(normal*2 - 1);
		normal = normalize(TBN * normal);
	}
	processedNormal = normal;
	
	vec3 N = normal;
	vec3 V = normalize(u_cameraPos-position);
	
	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, texCol.xyz, max(t_mask.x, 0.01));
    
    float distance = length(lPos - position);
	float attenuationInv = 1+light.att.constant + light.att.linear * distance +
	light.att.exponent * distance * distance * intensity;
    
    vec3 L = normalize(lPos - position);
    vec3 H = normalize(V + L);
    
    vec3 radiance = col / attenuationInv;
    
    float NDF = DistributionGGX(N, H, max(t_mask.y, 0.01));
    float G = GeometrySmith(N, V, L, max(t_mask.y, 0.01));      
    vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);
    
    vec3 kD = vec3(1.0) - F;
    kD *= 1.0 - max(t_mask.x, 0.01);
    
    vec3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
    vec3 specular = numerator / max(denominator, 0.001) * t_spec.xyz * material.textureOvr.xyz;
    
    float NdotL = max(dot(N, L), 0.0);                
    return (kD * texCol.xyz / PI + specular) * radiance * NdotL;
}